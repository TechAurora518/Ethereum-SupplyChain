pragma solidity >=0.4.24;

import '../coffeecore/Ownable.sol';
import '../coffeeaccesscontrol/FarmerRole.sol';
import '../coffeeaccesscontrol/DistributorRole.sol';
import '../coffeeaccesscontrol/RetailerRole.sol';
import '../coffeeaccesscontrol/ConsumerRole.sol';



// REMOVING
// Farmers can remove -> self.farmer
// Distributor can remove -> self.distributor
// Retailers can remove -> self.retailer
// Consumer can remove -> self.consumer

// Define a contract 'Supplychain'
contract SupplyChain is Ownable,FarmerRole,DistributorRole,RetailerRole,ConsumerRole {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => Txblocks) itemsHistory;

  // Define enum 'State' with the following values:
  enum State
  {
    ProduceByFarmer,         // 0
    ForSaleByFarmer,         // 1
    PurchasedByDistributor,  // 2
    ShippedByFarmer,         // 3
    ReceivedByDistributor,   // 4
    ProcessedByDistributor,  // 5
    PackageByDistributor,    // 6
    ForSaleByDistributor,    // 7
    PurchasedByRetailer,     // 8
    ShippedByDistributor,    // 9
    ReceivedByRetailer,      // 10
    ForSaleByRetailer,       // 11
    PurchasedByConsumer      // 12
    }


  State constant defaultState = State.ProduceByFarmer;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;                    // Stock Keeping Unit (SKU)
    uint    upc;                    // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;                // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID;         // Metamask-Ethereum address of the Farmer // ADDED PAYABLE
    string  originFarmName;         // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude;     // Farm Latitude
    string  originFarmLongitude;    // Farm Longitude
    uint    productID;              // Product ID potentially a combination of upc + sku
    string  productNotes;           // Product Notes
    uint256 productDate;            // Product Date NOTE: MIGHT NEED TO CHANGE type
    uint    productPrice;           // Product Price
    uint    productSliced;          // Parent cheese
    State   itemState;              // Product State as represented in the enum above
    address distributorID;          // Metamask-Ethereum address of the Distributor
    address retailerID;             // Metamask-Ethereum address of the Retailer
    address consumerID;             // Metamask-Ethereum address of the Consumer // ADDED payable
  }

  struct Txblocks {
    uint FTD;
    uint DTR;
    uint RTC;
  }


event ProduceByFarmer(uint upc);         //1
event ForSaleByFarmer(uint upc);         //2
event PurchasedByDistributor(uint upc);  //3
event ShippedByFarmer(uint upc);         //4
event ReceivedByDistributor(uint upc);   //5
event ProcessedByDistributor(uint upc);  //6
event PackagedByDistributor(uint upc);   //7
event ForSaleByDistributor(uint upc);    //8
event PurchasedByRetailer(uint upc);     //9
event ShippedByDistributor(uint upc);    //10
event ReceivedByRetailer(uint upc);      //11
event ForSaleByRetailer(uint upc);       //12
event PurchasedByConsumer(uint upc);     //13


  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address);
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price);
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc, address payable addressToFund) { // ADDED address payable
    uint _price = items[_upc].productPrice;
    uint  amountToReturn = msg.value - _price;
    addressToFund.transfer(amountToReturn);
    _;
  }



  modifier producedByFarmer(uint _upc) {
    require(items[_upc].itemState == State.ProduceByFarmer);
    _;
  }

  modifier forSaleByFarmer(uint _upc) {
    require(items[_upc].itemState == State.ForSaleByFarmer);
    _;
  }

  modifier purchasedByDistributor(uint _upc) {
    require(items[_upc].itemState == State.PurchasedByDistributor);
    _;
  }

  modifier shippedByFarmer(uint _upc) {
    require(items[_upc].itemState == State.ShippedByFarmer);
    _;
  }

  modifier receivedByDistributor(uint _upc) {
    require(items[_upc].itemState == State.ReceivedByDistributor);
    _;
  }

  modifier processByDistributor(uint _upc) {
    require(items[_upc].itemState == State.ProcessedByDistributor);
    _;
  }

  modifier packagedByDistributor(uint _upc) {
    require(items[_upc].itemState == State.PackageByDistributor);
    _;
  }

  modifier forSaleByDistributor(uint _upc) {
    require(items[_upc].itemState == State.ForSaleByDistributor);
    _;
  }


  modifier shippedByDistributor(uint _upc) {
    require(items[_upc].itemState == State.ShippedByDistributor);
    _;
  }

  modifier purchasedByRetailer(uint _upc) {
    require(items[_upc].itemState == State.PurchasedByRetailer);
    _;
  }

  modifier receivedByRetailer(uint _upc) {
    require(items[_upc].itemState == State.ReceivedByRetailer);
    _;
  }

  modifier forSaleByRetailer(uint _upc) {
    require(items[_upc].itemState == State.ForSaleByRetailer);
    _;
  }

  modifier purchasedByConsumer(uint _upc) {
    require(items[_upc].itemState == State.PurchasedByConsumer);
    _;
  }

  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

    // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      address payable ownerAddressPayable = _make_payable(owner);
      selfdestruct(ownerAddressPayable);
    }
  }


    // Function that allows you to convert an address into a payable address
  function _make_payable(address x) internal pure returns (address payable) {
      return address(uint160(x));
  }


  function _purchased(uint _upc, State state, address address_to_pay) internal {
    address payable ownerAddressPayable = _make_payable(address_to_pay);
    ownerAddressPayable.transfer(items[_upc].productPrice);
    items[_upc].ownerID = msg.sender;
    items[_upc].itemState = state;
  }




  function produceItemByFarmer(uint _upc, string memory _originFarmName, string memory _originFarmInformation, string memory _originFarmLatitude, string memory _originFarmLongitude, string memory _productNotes, uint _price) public
    onlyFarmer()
    {

    address distributorID;
    address retailerID;
    address consumerID;
    Item memory newProduce;
    newProduce.sku = sku;  // Stock Keeping Unit (SKU)
    newProduce.upc = _upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    newProduce.ownerID = msg.sender;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    newProduce.originFarmerID = msg.sender; // Metamask-Ethereum address of the Farmer
    newProduce.originFarmName = _originFarmName;  // Farmer Name
    newProduce.originFarmInformation = _originFarmInformation; // Farmer Information
    newProduce.originFarmLatitude = _originFarmLatitude; // Farm Latitude
    newProduce.originFarmLongitude = _originFarmLongitude;  // Farm Longitude
    newProduce.productID = _upc+sku;  // Product ID
    newProduce.productNotes = _productNotes; // Product Notes
    newProduce.productPrice = _price;  // Product Price
    newProduce.productDate = now;
    newProduce.productSliced = 0;
    newProduce.itemState = defaultState; // Product State as represented in the enum above
    newProduce.distributorID = distributorID; // Metamask-Ethereum address of the Distributor
    newProduce.retailerID = retailerID; // Metamask-Ethereum address of the Retailer
    newProduce.consumerID = consumerID; // Metamask-Ethereum address of the Consumer // ADDED payable
    items[_upc] = newProduce;

    uint placeholder;
    Txblocks memory txBlock;
    txBlock.FTD = placeholder;
    txBlock.DTR = placeholder;
    txBlock.RTC = placeholder;
    itemsHistory[_upc] = txBlock;

    // Increment sku
    sku = sku + 1;

    // Emit the appropriate event
    emit ProduceByFarmer(_upc);

  }


  function sellItemByFarmer(uint _upc, uint _price) public
    onlyFarmer()
    producedByFarmer(_upc)
    verifyCaller(items[_upc].ownerID)
    {
      items[_upc].itemState = State.ForSaleByFarmer;
      items[_upc].productPrice = _price;
      emit ForSaleByFarmer(_upc);
  }


  function purchaseItemByDistributor(uint _upc) public payable
    onlyDistributor()
    forSaleByFarmer(_upc)
    paidEnough(items[_upc].productPrice)
    checkValue(_upc, msg.sender)
    {
    address payable ownerAddressPayable = _make_payable(items[_upc].originFarmerID);
    ownerAddressPayable.transfer(items[_upc].productPrice);
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender;
    items[_upc].itemState = State.PurchasedByDistributor;
    itemsHistory[_upc].FTD = block.number;
    emit PurchasedByDistributor(_upc);

  }

  //4
  function shippedItemByFarmer(uint _upc) public payable
    onlyFarmer()
    purchasedByDistributor(_upc)
    verifyCaller(items[_upc].originFarmerID)
    {
    items[_upc].itemState = State.ShippedByFarmer;
    emit ShippedByFarmer(_upc);
  }

  //5
  function receivedItemByDistributor(uint _upc) public
    onlyDistributor()
    shippedByFarmer(_upc)
    verifyCaller(items[_upc].ownerID)
    {
    items[_upc].itemState = State.ReceivedByDistributor;
    emit ReceivedByDistributor(_upc);
  }

  //6
  function processedItemByDistributor(uint _upc,uint slices) public
    onlyDistributor()
    receivedByDistributor(_upc)
    verifyCaller(items[_upc].ownerID)
    {
    items[_upc].itemState = State.ProcessedByDistributor;
    items[_upc].productSliced = slices;
    emit ProcessedByDistributor(_upc);
  }

  //7
  function packageItemByDistributor(uint _upc) public
    onlyDistributor()
    processByDistributor(_upc)
    verifyCaller(items[_upc].ownerID)
    {
    items[_upc].itemState = State.PackageByDistributor;
    emit PackagedByDistributor(_upc);
  }

  //8
  function sellItemByDistributor(uint _upc, uint _price) public
    onlyDistributor()
    packagedByDistributor(_upc)
    verifyCaller(items[_upc].ownerID)
    {
        items[_upc].itemState = State.ForSaleByDistributor;
        items[_upc].productPrice = _price;
        emit ForSaleByDistributor(upc);
  }

  //9
  function purchaseItemByRetailer(uint _upc) public payable
    onlyRetailer()
    forSaleByDistributor(_upc)
    paidEnough(items[_upc].productPrice)
    checkValue(_upc, msg.sender)
    {
    address payable ownerAddressPayable = _make_payable(items[_upc].distributorID);
    ownerAddressPayable.transfer(items[_upc].productPrice);
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.PurchasedByRetailer;
    itemsHistory[_upc].DTR = block.number;
    emit PurchasedByRetailer(_upc);
  }

  //10
  function shippedItemByDistributor(uint _upc) public
    onlyDistributor()
    purchasedByRetailer(_upc)
    verifyCaller(items[_upc].distributorID)
    {
      items[_upc].itemState = State.ShippedByDistributor;
      emit ShippedByDistributor(_upc);
  }

  //11
  function receivedItemByRetailer(uint _upc) public
    onlyRetailer()
    shippedByDistributor(_upc)
    verifyCaller(items[_upc].ownerID)
    {
      items[_upc].itemState = State.ReceivedByRetailer;
      emit ReceivedByRetailer(_upc);
  }

  //12
  function sellItemByRetailer(uint _upc, uint _price) public
    onlyRetailer()
    receivedByRetailer(_upc)
    verifyCaller(items[_upc].ownerID)
    {
      items[_upc].itemState = State.ForSaleByRetailer;
      items[_upc].productPrice = _price;
      emit ForSaleByRetailer(_upc);
  }

  //13
  function purchaseItemByConsumer(uint _upc) public payable
    onlyConsumer()
    forSaleByRetailer(_upc)
    paidEnough(items[_upc].productPrice)
    checkValue(_upc, msg.sender)
    {
      items[_upc].consumerID = msg.sender;
      address payable ownerAddressPayable = _make_payable(items[_upc].retailerID);
      ownerAddressPayable.transfer(items[_upc].productPrice);
      items[_upc].ownerID = msg.sender;
      items[_upc].consumerID = msg.sender;
      items[_upc].itemState = State.PurchasedByConsumer;
      itemsHistory[_upc].RTC = block.number;
    emit PurchasedByConsumer(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns
    (
    uint    itemSKU,
    uint    itemUPC,
    address ownerID,
    address originFarmerID,
    string memory  originFarmName,
    string memory originFarmInformation,
    string memory originFarmLatitude,
    string memory originFarmLongitude,
    uint productDate,
    uint productSliced
    )
    {
    // Assign values to the 8 parameters
    Item memory item = items[_upc];

    return
    (
      item.sku,
      item.upc,
      item.ownerID,
      item.originFarmerID,
      item.originFarmName,
      item.originFarmInformation,
      item.originFarmLatitude,
      item.originFarmLongitude,
      item.productDate,
      item.productSliced
    );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns
    (
    uint    itemSKU,
    uint    itemUPC,
    uint    productID,
    string  memory productNotes,
    uint    productPrice,
    uint256 productDate,
    State   itemState,
    address distributorID,
    address retailerID,
    address consumerID
    )
    {
      // Assign values to the 9 parameters
    Item memory item = items[_upc];

    return
    (
      item.sku,
      item.upc,
      item.productID,
      item.productNotes,
      item.productPrice,
      item.productDate,
      item.itemState,
      item.distributorID,
      item.retailerID,
      item.consumerID
    );

  }

  // Define a function 'fetchItemHistory' that fetaches the data
  function fetchitemHistory(uint _upc) public view returns
    (
      uint blockfarmerToDistributor,
      uint blockDistributorToRetailer,
      uint blockRetailerToConsumer
    )
    {
      Txblocks memory txblock = itemsHistory[_upc];
      return
      (
        txblock.FTD,
        txblock.DTR,
        txblock.RTC
      );

    }

  }
